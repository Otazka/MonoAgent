# GitHub Monorepo Splitter Configuration
# Copy this file to .env and edit with your actual values

# =============================================================================
# REQUIRED VARIABLES
# =============================================================================

# Monorepo to split (SSH or HTTPS URL)
SOURCE_REPO_URL=git@github.com:mycompany/monorepo.git

# Splitting mode: 'auto', 'branch', or 'project'
# - auto: Detect projects and common components automatically
# - branch: Extract different branches into separate repositories
# - project: Extract different projects from same branch into separate repositories
MODE=auto

# GitHub organization or username to create new repos under
ORG=mycompany

# GitHub Personal Access Token with repo scope
GITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# =============================================================================
# MODE-SPECIFIC VARIABLES
# =============================================================================

# For BRANCH mode: Comma-separated list of branch names
# Each branch becomes a separate repository
BRANCHES=frontend,backend,mobile,admin,api

# For PROJECT mode: Comma-separated list of project directory names
# Each project directory becomes a separate repository
PROJECTS=fractol,printf,pushswap

# =============================================================================
# OPTIONAL VARIABLES
# =============================================================================

# Path to common libraries folder (extracted to common-libs repository)
# Leave empty if no common libraries to extract
COMMON_PATH=libft

# Create repositories as private (true/false)
PRIVATE_REPOS=false

# Default branch name for created repositories
DEFAULT_BRANCH=main

# Naming templates for created repositories
REPO_NAME_TEMPLATE_APP={name}-app
REPO_NAME_TEMPLATE_LIB={name}-lib

# OpenAI API key for AI-powered analysis (optional)
# OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# =============================================================================
# MULTI-PROVIDER (BETA)
# =============================================================================

# Supported providers: github | gitlab | bitbucket | azure
# Defaults to github when not set
PROVIDER=github

# GitLab (uses PRIVATE-TOKEN header)
# Set PROVIDER=gitlab and provide token in GITHUB_TOKEN
# Optionally override host for self-hosted GitLab
# GITLAB_HOST=https://gitlab.com

# Bitbucket Cloud (uses Basic auth: username + app password)
# Set PROVIDER=bitbucket, PROVIDER_USERNAME=<your-workspace-or-username>
# Token in GITHUB_TOKEN should be an App Password with repository:admin
# PROVIDER_USERNAME=myworkspace

# Azure DevOps (PAT via Basic auth with empty username or provided PROVIDER_USERNAME)
# Set PROVIDER=azure, ORG=<ado-org>, AZURE_PROJECT=<ado-project>
# Token in GITHUB_TOKEN should be an Azure DevOps PAT with Code (read/write)
# AZURE_PROJECT=my-project

# =============================================================================
# EXAMPLE CONFIGURATIONS
# =============================================================================

# Example 1: Auto Mode
# SOURCE_REPO_URL=git@github.com:mycompany/monorepo.git
# MODE=auto
# ORG=mycompany
# GITHUB_TOKEN=ghp_xxx

# Example 2: Branch Mode
# SOURCE_REPO_URL=git@github.com:mycompany/monorepo.git
# MODE=branch
# BRANCHES=frontend,backend,mobile,admin,api
# ORG=mycompany
# GITHUB_TOKEN=ghp_xxx

# Example 3: Project Mode (like libft example)
# SOURCE_REPO_URL=git@github.com:mycompany/testmonorepo.git
# MODE=project
# PROJECTS=fractol,printf,pushswap
# COMMON_PATH=libft
# ORG=mycompany
# GITHUB_TOKEN=ghp_xxx
